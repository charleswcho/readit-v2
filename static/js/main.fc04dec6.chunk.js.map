{"version":3,"sources":["components/Post/Upvotes.jsx","components/Post/Post.jsx","components/Posts/Posts.jsx","utils/useDataApi.js","components/App.js","serviceWorker.js","index.js"],"names":["Upvotes","_ref","ups","isMobile","iconFontSize","fontSize","react_default","a","createElement","className","ArrowUpward_default","Typography_default","variant","gutterBottom","toLocaleString","Post","idx","thumbnail","permalink","url","title","author","subreddit","useMediaQuery","showThumbnail","match","key","Post_Upvotes","href","target","rel","src","alt","concat","Posts","posts","loading","handleScrollBottom","CircularProgress_default","onScroll","_ref2","scrollHeight","scrollTop","clientHeight","map","post","useDataApi","initialUrl","initialData","_useState","useState","_useState2","Object","slicedToArray","setUrl","_useState3","_useState4","data","setData","_useState5","_useState6","setLoading","_useState7","_useState8","error","setError","useEffect","asyncToGenerator","regenerator_default","mark","_callee","res","json","wrap","_context","prev","next","fetch","sent","t0","stop","propTypes","PropTypes","string","isRequired","object","App","filter","setFilter","_useDataApi","children","_useDataApi2","getData","count","setCount","child","AppBar_default","position","Toolbar_default","FormControl_default","Select_default","value","onChange","event","MenuItem_default","Star_default","TrendingUp_default","NewReleases_default","components_Posts_Posts","console","log","before","after","color","Tabs_default","_","newValue","Tab_default","icon","label","Boolean","window","location","hostname","theme","createMuiTheme","palette","type","primary","main","typography","useNextVariants","ReactDOM","render","styles","CssBaseline_default","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc04dec6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nimport './Upvotes.sass';\n\nfunction Upvotes({ ups, isMobile }) {\n  const iconFontSize = isMobile ? 'inherit' : 'small';\n  const fontSize = isMobile ? 'caption' : 'body1';\n\n  return (\n    <div className=\"upvotes\">\n      <ArrowUpwardIcon className=\"upvote-icon\" fontSize={iconFontSize} />\n\n      <Typography variant={fontSize} gutterBottom>\n        {ups.toLocaleString()}\n      </Typography>\n    </div>\n  );\n}\n\nUpvotes.propTypes = {\n  ups: PropTypes.number.isRequired,\n  isMobile: PropTypes.bool.isRequired\n};\n\nexport default Upvotes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { unstable_useMediaQuery as useMediaQuery } from '@material-ui/core/useMediaQuery';\nimport Typography from '@material-ui/core/Typography';\n\nimport Upvotes from './Upvotes';\n\nimport './Post.sass';\n\nfunction Post(\n  { thumbnail, ups, permalink, url, title, author, subreddit },\n  idx\n) {\n  const isMobile = useMediaQuery('(max-width:600px)');\n  const showThumbnail = thumbnail.match(\n    /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/g\n  );\n\n  return (\n    <li key={idx} className=\"post\">\n      <div className=\"metrics\">\n        {!isMobile && <Upvotes ups={ups} isMobile={isMobile} />}\n\n        {showThumbnail ? (\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img className=\"thumbnail\" src={thumbnail} alt=\"thumbnail\" />\n          </a>\n        ) : null}\n      </div>\n\n      <div className=\"content\">\n        <div className=\"title\">\n          <a\n            href={`https://www.reddit.com${permalink}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Typography variant=\"body2\" gutterBottom>\n              {title}\n            </Typography>\n          </a>\n        </div>\n\n        <div className=\"under\">\n          <div className=\"author\">\n            <Typography variant=\"caption\" gutterBottom>\n              by\n              <a\n                href={`https://www.reddit.com/user/${author}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {' '}\n                {author}\n              </a>\n            </Typography>\n          </div>\n\n          <div className=\"subreddit\">\n            <Typography variant=\"caption\" gutterBottom>\n              to\n              <a\n                href={`https://www.reddit.com/r/${subreddit}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {' '}\n                {subreddit}\n              </a>\n            </Typography>\n          </div>\n        </div>\n\n        {isMobile && <Upvotes ups={ups} isMobile={isMobile} />}\n      </div>\n    </li>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n  idx: PropTypes.number.isRequired\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Post from '../Post/Post';\n\nimport './Posts.sass';\n\nfunction Posts({ posts, loading, handleScrollBottom }) {\n  function handleScrollEvent({ target }) {\n    if (target.scrollHeight - target.scrollTop === target.clientHeight) {\n      handleScrollBottom();\n    }\n  }\n\n  return loading ? (\n    <div className=\"loading-page\">\n      <CircularProgress />\n    </div>\n  ) : (\n    <ul className=\"posts\" onScroll={handleScrollEvent}>\n      {posts.map((post, idx) => Post(post, idx))}\n    </ul>\n  );\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired\n};\n\nexport default Posts;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  const [data, setData] = useState(initialData);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      setError(false);\n\n      try {\n        const res = await fetch(url);\n        const json = await res.json();\n\n        setData(json.data);\n      } catch (error) {\n        setError(error);\n      }\n\n      setLoading(false);\n    })();\n  }, [url]);\n\n  return [data, loading, error, setUrl];\n};\n\nuseDataApi.propTypes = {\n  initialUrl: PropTypes.string.isRequired,\n  initialData: PropTypes.object.isRequired\n};\n\nexport default useDataApi;\n","import React, { useState } from 'react';\n\nimport { unstable_useMediaQuery as useMediaQuery } from '@material-ui/core/useMediaQuery';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport StarIcon from '@material-ui/icons/Star';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\n\nimport Posts from './Posts/Posts';\n\nimport useDataApi from '../utils/useDataApi';\n\nimport './App.sass';\n\nfunction App() {\n  const isMobile = useMediaQuery('(max-width: 600px)');\n  const [filter, setFilter] = useState('best');\n  const [data, loading, , getData] = useDataApi(\n    'https://www.reddit.com/best.json',\n    { children: [] }\n  );\n  const [count, setCount] = useState(25);\n\n  // default url (front page of Reddit)\n  // let url = 'https://www.reddit.com/best.json';\n  // If subreddits exist we make a custom url\n  // if (reddit) {\n  //   url = `https://www.reddit.com/r/${reddit}.json`\n  // }\n\n  const posts = data.children.map(child => child.data);\n\n  const handleSelectChange = event => {\n    setFilter(event.target.value);\n\n    getData(`https://www.reddit.com/${event.target.value}.json`);\n    setCount(25);\n  };\n\n  const handleTabChange = (_, newValue) => {\n    setFilter(newValue);\n\n    getData(`https://www.reddit.com/${newValue}.json`);\n    setCount(25);\n  };\n\n  const handleScrollBottom = () => {\n    console.log('Scrolled bottom');\n\n    const before = data.before ? `&before${data.before}` : '';\n\n    getData(\n      `https://www.reddit.com/hot.json?after=${\n        data.after\n      }${before}&count=${count}`\n    );\n    setCount(count + 25);\n  };\n\n  return (\n    <div className=\"App\">\n      {!isMobile && (\n        <AppBar position=\"static\">\n          <Toolbar className=\"toolbar\">\n            <a href=\"/\">\n              <Typography variant=\"h6\">Readit</Typography>\n            </a>\n\n            <FormControl>\n              <Select value={filter} onChange={handleSelectChange}>\n                <MenuItem value=\"best\">\n                  <StarIcon className=\"select-icon\" fontSize=\"small\" /> Best\n                </MenuItem>\n                <MenuItem value=\"hot\">\n                  <TrendingUpIcon className=\"select-icon\" fontSize=\"small\" />\n                  Hot\n                </MenuItem>\n                <MenuItem value=\"new\">\n                  <NewReleasesIcon className=\"select-icon\" fontSize=\"small\" />\n                  New\n                </MenuItem>\n              </Select>\n            </FormControl>\n          </Toolbar>\n        </AppBar>\n      )}\n\n      <Posts\n        posts={posts}\n        loading={loading}\n        handleScrollBottom={handleScrollBottom}\n      />\n\n      {isMobile && (\n        <AppBar position=\"fixed\" color=\"primary\" className=\"app-bar\">\n          <Tabs variant=\"fullWidth\" value={filter} onChange={handleTabChange}>\n            <Tab value=\"best\" icon={<StarIcon />} label=\"Best\" />\n            <Tab value=\"hot\" icon={<TrendingUpIcon />} label=\"Hot\" />\n            <Tab value=\"new\" icon={<NewReleasesIcon />} label=\"New\" />\n          </Tabs>\n        </AppBar>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './index.sass';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#0080ff'\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    }\n    // divider: '#1d2731',\n    // background: '#0080ff'\n  },\n  typography: { useNextVariants: true }\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}